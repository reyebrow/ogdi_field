<?php
// $Id$

/**
 * @file
 * The CCK hooks for creating an OGDI field, plus all the code
 * to retrieve the necessary data from OGDI itself.
 */


/**
 * Implements hook_menu().
 */
function ogdi_field_menu() {
  $items = array();

  // AHAH callback page
  $items['ogdi_field_filter'] = array(
    'title' => 'Table builder',
    'page callback' => 'ogdi_field_build_data_ahah',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
} 


//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
 * Implements hook_theme().
 */
function ogdi_field_theme() {
  return array(
    // Themes for the formatters.
    'ogdi_field_formatter_default' => array(
      'variables' => array('display_url' => NULL),
      'file' => 'ogdi_field_formatter.inc',
    ),
    'ogdi_field_formatter_plain' => array(
      'variables' => array('element' => NULL),
      'file' => 'ogdi_field_formatter.inc',
    ),
    'ogdi_field_formatter_link' => array(
      'variables' => array('element' => NULL),
      'file' => 'ogdi_field_formatter.inc',
    ),
    'ogdi_field_filter' => array(
      'variables' => array(),
      'file' => 'ogdi_field_formatter.inc',
    ),
    'ogdi_field_container' => array(
      'variables' => array('ogdi' => NULL, 'headers' => NULL, 'rows' => NULL, 'parameters' => NULL),
      'file' => 'ogdi_field_formatter.inc',
    ),
    'ogdi_field_datatable' => array(
      'variables' => array('headers' => NULL, 'rows' => NULL, 'datasource' => NULL, 'dataset_id' => NULL, 'parameters' => NULL),
      'file' => 'ogdi_field_formatter.inc',
    ),
    'ogdi_field_map' => array(
      'variables' => array('datasource' => NULL, 'dataset_id' => NULL, 'parameters' => NULL),
      'file' => 'ogdi_field_formatter.inc',
    ),
    'ogdi_field_helptext' => array(
      'file' => 'ogdi_field_formatter.inc',
    ),
    'ogdi_field_atom_link' => array(
      'variables' => array('datasource' => NULL, 'dataset_id' => NULL, 'querystring' => NULL),
      'file' => 'ogdi_field_formatter.inc',
    ),
    'ogdi_field_download_link' => array(
      'variables' => array('datasource' => NULL, 'dataset_id' => NULL, 'querystring' => NULL),
      'file' => 'ogdi_field_formatter.inc',
    )
  );
}


/**
 * Implements hook_field_formatter_info().
 */
function ogdi_field_field_formatter_info() {
  $formatters = array(
    'oembed_thumbnail' => array(
      'label' => t('OGDI Embed'),
      'field types' => array('link_field'),
      'description' => t('Embeds OGDI data if possible - otherwise just links to data source.'),
    ),
  );

  return $formatters;
}


/**
 * Implements hook_field_formatter_view().
 */
function ogdi_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $attributes = array();
    $url = url($item['url'], $item + array('external' => TRUE));
    $attributes = array_filter($display['settings']);
    $element[$delta]['#markup'] = theme('ogdi_field_formatter_default', $item);
  }

  return $element;
}



//==========================================//
// RETRIEVING THE DATA
//==========================================//

/**
 * Creates the ogdi Object.
 *
 * Initializes it in one central place reusing it if needed.
 *
 * @param $datasource
 *   A string containing the path to the datasource container.
 *
 * @param $dataset_id
 *   A string containing the name of the dataset to retrieve.
 *
 * @return
 *   A full OGDI object.
 */
function ogdi_field_ogdi($datasource = NULL, $dataset_id = NULL) {
  static $ogdi = NULL;
  if (!$ogdi) {
    require_once(dirname(__FILE__) . '/ogdi-api.php');
    $ogdi= new Ogdi($datasource, $dataset_id);
  }
  return $ogdi;
}


/**
 * Function to retrieve metadata of a certain dataset from OGDI.
 *
 * Empty e-mail addresses are allowed. See RFC 2822 for details.
 *
 * @param $ogdi
 *   An OGDI object.
 *
 * @return
 *   An array of Metadata for a specific dataset, built from decoded JSON data.
 */
function ogdi_field_get_metadata($ogdi) {
  try {
    $data = $ogdi->getEntityMetadata(array('$filter' => "entityset eq '". $ogdi->dataset_id ."'", 'format' => 'json' ));  
  } catch (OgdiException $e) {
    watchdog('ogdi', $e->getMessage());
    drupal_set_message(t('Failed to get Metadata for %dataset', array('%dataset' => $ogdi->dataset_id)), 'warning');
  }
  $results = json_decode($data);
  return $results;
}


/**
 * Function to retrieve the full data of a certain dataset from OGDI.
 *
 * @param $ogdi
 *   An OGDI object.
 *
 * @param $parameters
 *   An array of querystring parameters to pass to the API callt.
 *
 * @return
 *   An array of Metadata for a specific dataset, built from decoded JSON data.
 */
function ogdi_field_get_data($ogdi, $parameters) {
  try {
    $data = $ogdi->getDataset($ogdi->dataset_id, $parameters);
  } catch (OgdiException $e) {
    watchdog('ogdi', $e->getMessage());
    drupal_set_message(t('Failed to get data for %dataset ', array('%dataset' => $ogdi->dataset_id)) , 'warning');
  }
  $results = json_decode($data);
  return $results;
}


//==========================================//
// BUILDING THE DATA
//==========================================//

/**
 * Function to retrieve and build data when filter is run.
 *
 * @see ogdi_field_filter_form().
 */
function ogdi_field_build_data_ahah() {
  $datasource = filter_xss($_POST['datasource']);
  $dataset_id = filter_xss($_POST['dataset_id']);
  
  $filter = $_POST['filter'];
  
  $parameters = array('format' => 'json', '$filter' => $filter);
  
  // Create a new instance of OGDI object
  $ogdi = ogdi_field_ogdi($datasource, $dataset_id);
  // Get the schema (column names) of the dataset
  $schema = ogdi_field_get_metadata($ogdi);
  
  // Build the table headers from that
  $headers = ogdi_field_build_table_headers($schema->d[0]);
  
  // Get the data
  $data = ogdi_field_get_data($ogdi, $parameters);

  // Build the table rows from that data
  $rows = ogdi_field_build_table($data->d, $headers);
  
  $output = theme('ogdi_field_container', $ogdi, $headers, $rows, $parameters);
  //watchdog('ogdi', 'Filter has a value of %value ', array('value' => $filter));
  drupal_json($output);
}


/**
 * Function to build table headers from OGDI meta data response.
 *
 * @param $data
 *   An array containing dataset metadata.
 *
 * @return
 *   An array of table headers that can be used by theme_table().
 */
function ogdi_field_build_table_headers($data) {
  // Cast the Object into an array...
  $data = (array) $data;
  // Remove the first 6 elements, they are not needed...
  $data = array_slice($data, 6);
  foreach ($data as $name => $type) {
    $headers[] = filter_xss($name); 
  }
  return $headers;
}


/**
 * Function to build table from OGDI meta data response.
 *
 * @param $data
 *   An array containing the data returned from an API call.
 *
 * @param $headers
 *  An array of table headers gotten from ogdi_field_build_table_headers().
 *
 * @return
 *   An array of rows that can be used by theme_table().
 */
function ogdi_field_build_table($data, $headers) {
  foreach ($data as $row) {
    $row = (array) $row;  // Cast row from an Object to an array...
    $row = array_slice($row, 4);  // Remove the first 4 items, they are not needed...
    for ($i=0; $i<=count($headers)-1; $i++) { 
      // We now need to match each column in a row with a header...
      // Create a new array and set it's key to be the name of the header column...
      // Set it's value to be the value for that column in the current row, it may be empty...
      $new_row[$headers[$i]] = $row[$headers[$i]];
    }
    $rows[] = $new_row;
  }
  return $rows;
}